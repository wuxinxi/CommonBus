package szxb.com.commonbus.db.table;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import szxb.com.commonbus.entity.ScanEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCAN_ENTITY".
*/
public class ScanEntityDao extends AbstractDao<ScanEntity, Long> {

    public static final String TABLENAME = "SCAN_ENTITY";

    /**
     * Properties of entity ScanEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Open_id = new Property(1, String.class, "open_id", false, "OPEN_ID");
        public final static Property Mch_trx_id = new Property(2, String.class, "mch_trx_id", false, "MCH_TRX_ID");
        public final static Property Order_time = new Property(3, Long.class, "order_time", false, "ORDER_TIME");
        public final static Property Total_fee = new Property(4, int.class, "total_fee", false, "TOTAL_FEE");
        public final static Property Pay_fee = new Property(5, int.class, "pay_fee", false, "PAY_FEE");
        public final static Property City_code = new Property(6, String.class, "city_code", false, "CITY_CODE");
        public final static Property In_station_id = new Property(7, int.class, "in_station_id", false, "IN_STATION_ID");
        public final static Property In_station_name = new Property(8, String.class, "in_station_name", false, "IN_STATION_NAME");
        public final static Property Paystatus = new Property(9, int.class, "paystatus", false, "PAYSTATUS");
        public final static Property Transaction_id = new Property(10, String.class, "transaction_id", false, "TRANSACTION_ID");
        public final static Property Status = new Property(11, String.class, "status", false, "STATUS");
        public final static Property Status_desc = new Property(12, String.class, "status_desc", false, "STATUS_DESC");
        public final static Property Record = new Property(13, String.class, "record", false, "RECORD");
    }


    public ScanEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ScanEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCAN_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OPEN_ID\" TEXT," + // 1: open_id
                "\"MCH_TRX_ID\" TEXT," + // 2: mch_trx_id
                "\"ORDER_TIME\" INTEGER," + // 3: order_time
                "\"TOTAL_FEE\" INTEGER NOT NULL ," + // 4: total_fee
                "\"PAY_FEE\" INTEGER NOT NULL ," + // 5: pay_fee
                "\"CITY_CODE\" TEXT," + // 6: city_code
                "\"IN_STATION_ID\" INTEGER NOT NULL ," + // 7: in_station_id
                "\"IN_STATION_NAME\" TEXT," + // 8: in_station_name
                "\"PAYSTATUS\" INTEGER NOT NULL ," + // 9: paystatus
                "\"TRANSACTION_ID\" TEXT," + // 10: transaction_id
                "\"STATUS\" TEXT," + // 11: status
                "\"STATUS_DESC\" TEXT," + // 12: status_desc
                "\"RECORD\" TEXT);"); // 13: record
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCAN_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScanEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String open_id = entity.getOpen_id();
        if (open_id != null) {
            stmt.bindString(2, open_id);
        }
 
        String mch_trx_id = entity.getMch_trx_id();
        if (mch_trx_id != null) {
            stmt.bindString(3, mch_trx_id);
        }
 
        Long order_time = entity.getOrder_time();
        if (order_time != null) {
            stmt.bindLong(4, order_time);
        }
        stmt.bindLong(5, entity.getTotal_fee());
        stmt.bindLong(6, entity.getPay_fee());
 
        String city_code = entity.getCity_code();
        if (city_code != null) {
            stmt.bindString(7, city_code);
        }
        stmt.bindLong(8, entity.getIn_station_id());
 
        String in_station_name = entity.getIn_station_name();
        if (in_station_name != null) {
            stmt.bindString(9, in_station_name);
        }
        stmt.bindLong(10, entity.getPaystatus());
 
        String transaction_id = entity.getTransaction_id();
        if (transaction_id != null) {
            stmt.bindString(11, transaction_id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, status);
        }
 
        String status_desc = entity.getStatus_desc();
        if (status_desc != null) {
            stmt.bindString(13, status_desc);
        }
 
        String record = entity.getRecord();
        if (record != null) {
            stmt.bindString(14, record);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScanEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String open_id = entity.getOpen_id();
        if (open_id != null) {
            stmt.bindString(2, open_id);
        }
 
        String mch_trx_id = entity.getMch_trx_id();
        if (mch_trx_id != null) {
            stmt.bindString(3, mch_trx_id);
        }
 
        Long order_time = entity.getOrder_time();
        if (order_time != null) {
            stmt.bindLong(4, order_time);
        }
        stmt.bindLong(5, entity.getTotal_fee());
        stmt.bindLong(6, entity.getPay_fee());
 
        String city_code = entity.getCity_code();
        if (city_code != null) {
            stmt.bindString(7, city_code);
        }
        stmt.bindLong(8, entity.getIn_station_id());
 
        String in_station_name = entity.getIn_station_name();
        if (in_station_name != null) {
            stmt.bindString(9, in_station_name);
        }
        stmt.bindLong(10, entity.getPaystatus());
 
        String transaction_id = entity.getTransaction_id();
        if (transaction_id != null) {
            stmt.bindString(11, transaction_id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, status);
        }
 
        String status_desc = entity.getStatus_desc();
        if (status_desc != null) {
            stmt.bindString(13, status_desc);
        }
 
        String record = entity.getRecord();
        if (record != null) {
            stmt.bindString(14, record);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ScanEntity readEntity(Cursor cursor, int offset) {
        ScanEntity entity = new ScanEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // open_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mch_trx_id
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // order_time
            cursor.getInt(offset + 4), // total_fee
            cursor.getInt(offset + 5), // pay_fee
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // city_code
            cursor.getInt(offset + 7), // in_station_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // in_station_name
            cursor.getInt(offset + 9), // paystatus
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // transaction_id
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // status
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // status_desc
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // record
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScanEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOpen_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMch_trx_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrder_time(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTotal_fee(cursor.getInt(offset + 4));
        entity.setPay_fee(cursor.getInt(offset + 5));
        entity.setCity_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIn_station_id(cursor.getInt(offset + 7));
        entity.setIn_station_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPaystatus(cursor.getInt(offset + 9));
        entity.setTransaction_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStatus_desc(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRecord(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ScanEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ScanEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScanEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
